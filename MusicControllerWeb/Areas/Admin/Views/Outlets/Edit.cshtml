@model OutletCreateViewModel
@{
    ViewData["Title"] = "Edit";
}
<div class="white-color">
    <div class="container row">
        <!--  ManageOutlet Component-->
        <div class="col-sm-6 border p-5">
            <h4 class="text-center">Edit Outlet</h4><br />
            <form asp-action="Edit" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger">
                </div>
                <input asp-for="Id" id="Id" type="hidden" />
                <input asp-for="ImageUrl" id="ImageUrl" type="hidden" />
                <div class="form-group">
                    <label asp-for="Name"></label>
                    <input asp-for="Name" id="Name" class="form-control" placeholder="Enter name">
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="File"></label><br />
                    <input asp-for="File" class="" id="File" placeholder="Choose logo">
                    <span asp-validation-for="File" class="text-danger"></span>
                </div><br />
                <button type="submit" class="btn btn-success">Save</button>
            </form>
        </div>

        <!--  ManageOutlet Component-->
        @await Component.InvokeAsync("ManageOutletPassword", new { OutletId = Model.Id })
    </div>
    <!--  Device List Component-->
    @await Component.InvokeAsync("OutletDevices", new { OutletId = Model.Id })
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
